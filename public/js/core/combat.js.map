{
  "version": 3,
  "sources": ["../../../src/core/combat.ts"],
  "sourcesContent": ["import { Position, NPC, Player } from '../types';\n\nexport class CombatSystem {\n    private readonly ATTACK_RANGE = 1; // Melee attack range\n    private readonly ATTACK_DELAY = 2400; // Attack speed in milliseconds\n    private lastAttackTime: number = 0;\n\n    constructor(private player: Player) {}\n\n    public async attackTarget(target: NPC): Promise<void> {\n        const currentTime = Date.now();\n        \n        // Check if we can attack again (cooldown)\n        if (currentTime - this.lastAttackTime < this.ATTACK_DELAY) {\n            return;\n        }\n\n        // Check if target is in range\n        if (this.isTargetInRange(target.position)) {\n            console.log(`Attacking ${target.name}`);\n            await this.performAttack(target);\n            this.lastAttackTime = currentTime;\n        } else {\n            console.log(`${target.name} is not in range`);\n        }\n    }\n\n    public async killChickens(): Promise<void> {\n        const chickenLocations = this.getLumbridgeChickenLocations();\n        \n        for (const location of chickenLocations) {\n            // Find nearest chicken\n            const chicken: NPC = {\n                id: 1,\n                name: 'Chicken',\n                position: location\n            };\n\n            // Attack chicken until dead\n            await this.attackTarget(chicken);\n            \n            // Collect feathers\n            await this.collectDrops(location);\n        }\n    }\n\n    public async trainSwordCombat(): Promise<void> {\n        // Train with sword on chickens for optimal xp\n        console.log('Training sword combat skills...');\n        \n        // Ensure we have a sword equipped\n        await this.checkEquipment();\n        \n        // Find and attack chickens\n        await this.killChickens();\n    }\n\n    private async performAttack(target: NPC): Promise<void> {\n        // Calculate hit chance and damage\n        const damage = this.calculateDamage();\n        console.log(`Hit ${target.name} for ${damage} damage`);\n    }\n\n    private calculateDamage(): number {\n        // Basic damage calculation based on stats and weapon\n        const baseMax = 4; // Basic sword max hit\n        return Math.floor(Math.random() * baseMax) + 1;\n    }\n\n    private isTargetInRange(targetPosition: Position): boolean {\n        const distance = this.calculateDistance(this.player.position, targetPosition);\n        if (distance > this.ATTACK_RANGE) {\n            // Move closer to target if not in range\n            this.moveTowardTarget(targetPosition);\n            return false;\n        }\n        return true;\n    }\n\n    private moveTowardTarget(targetPosition: Position): void {\n        // Calculate step toward target\n        const dx = targetPosition.x - this.player.position.x;\n        const dy = targetPosition.y - this.player.position.y;\n        \n        // Normalize movement to 1 tile at a time\n        const stepX = Math.sign(dx);\n        const stepY = Math.sign(dy);\n        \n        // Update player position\n        this.player.position = {\n            x: this.player.position.x + stepX,\n            y: this.player.position.y + stepY\n        };\n        \n        console.log(`Moving closer to target: ${this.player.position.x}, ${this.player.position.y}`);\n    }\n\n    private calculateDistance(pos1: Position, pos2: Position): number {\n        const dx = pos2.x - pos1.x;\n        const dy = pos2.y - pos1.y;\n        return Math.sqrt(dx * dx + dy * dy);\n    }\n\n    private getLumbridgeChickenLocations(): Position[] {\n        // Known chicken locations in Lumbridge\n        return [\n            { x: 3235, y: 3295 }, // Behind Lumbridge Castle\n            { x: 3235, y: 3294 },\n            { x: 3236, y: 3296 },\n            { x: 3233, y: 3295 }\n        ];\n    }\n\n    private async checkEquipment(): Promise<void> {\n        // Check if sword is equipped\n        console.log('Checking equipment...');\n        // TODO: Implement equipment checking logic\n    }\n\n    private async collectDrops(position: Position): Promise<void> {\n        console.log('Collecting feathers...');\n        // TODO: Implement drop collection logic\n    }\n}\n"],
  "mappings": ";AAEO,IAAM,eAAN,MAAmB;AAAA,EAKtB,YAAoB,QAAgB;AAAhB;AAJpB,SAAiB,eAAe;AAChC;AAAA,SAAiB,eAAe;AAChC;AAAA,SAAQ,iBAAyB;AAAA,EAEI;AAAA,EAErC,MAAa,aAAa,QAA4B;AAClD,UAAM,cAAc,KAAK,IAAI;AAG7B,QAAI,cAAc,KAAK,iBAAiB,KAAK,cAAc;AACvD;AAAA,IACJ;AAGA,QAAI,KAAK,gBAAgB,OAAO,QAAQ,GAAG;AACvC,cAAQ,IAAI,aAAa,OAAO,IAAI,EAAE;AACtC,YAAM,KAAK,cAAc,MAAM;AAC/B,WAAK,iBAAiB;AAAA,IAC1B,OAAO;AACH,cAAQ,IAAI,GAAG,OAAO,IAAI,kBAAkB;AAAA,IAChD;AAAA,EACJ;AAAA,EAEA,MAAa,eAA8B;AACvC,UAAM,mBAAmB,KAAK,6BAA6B;AAE3D,eAAW,YAAY,kBAAkB;AAErC,YAAM,UAAe;AAAA,QACjB,IAAI;AAAA,QACJ,MAAM;AAAA,QACN,UAAU;AAAA,MACd;AAGA,YAAM,KAAK,aAAa,OAAO;AAG/B,YAAM,KAAK,aAAa,QAAQ;AAAA,IACpC;AAAA,EACJ;AAAA,EAEA,MAAa,mBAAkC;AAE3C,YAAQ,IAAI,iCAAiC;AAG7C,UAAM,KAAK,eAAe;AAG1B,UAAM,KAAK,aAAa;AAAA,EAC5B;AAAA,EAEA,MAAc,cAAc,QAA4B;AAEpD,UAAM,SAAS,KAAK,gBAAgB;AACpC,YAAQ,IAAI,OAAO,OAAO,IAAI,QAAQ,MAAM,SAAS;AAAA,EACzD;AAAA,EAEQ,kBAA0B;AAE9B,UAAM,UAAU;AAChB,WAAO,KAAK,MAAM,KAAK,OAAO,IAAI,OAAO,IAAI;AAAA,EACjD;AAAA,EAEQ,gBAAgB,gBAAmC;AACvD,UAAM,WAAW,KAAK,kBAAkB,KAAK,OAAO,UAAU,cAAc;AAC5E,QAAI,WAAW,KAAK,cAAc;AAE9B,WAAK,iBAAiB,cAAc;AACpC,aAAO;AAAA,IACX;AACA,WAAO;AAAA,EACX;AAAA,EAEQ,iBAAiB,gBAAgC;AAErD,UAAM,KAAK,eAAe,IAAI,KAAK,OAAO,SAAS;AACnD,UAAM,KAAK,eAAe,IAAI,KAAK,OAAO,SAAS;AAGnD,UAAM,QAAQ,KAAK,KAAK,EAAE;AAC1B,UAAM,QAAQ,KAAK,KAAK,EAAE;AAG1B,SAAK,OAAO,WAAW;AAAA,MACnB,GAAG,KAAK,OAAO,SAAS,IAAI;AAAA,MAC5B,GAAG,KAAK,OAAO,SAAS,IAAI;AAAA,IAChC;AAEA,YAAQ,IAAI,4BAA4B,KAAK,OAAO,SAAS,CAAC,KAAK,KAAK,OAAO,SAAS,CAAC,EAAE;AAAA,EAC/F;AAAA,EAEQ,kBAAkB,MAAgB,MAAwB;AAC9D,UAAM,KAAK,KAAK,IAAI,KAAK;AACzB,UAAM,KAAK,KAAK,IAAI,KAAK;AACzB,WAAO,KAAK,KAAK,KAAK,KAAK,KAAK,EAAE;AAAA,EACtC;AAAA,EAEQ,+BAA2C;AAE/C,WAAO;AAAA,MACH,EAAE,GAAG,MAAM,GAAG,KAAK;AAAA;AAAA,MACnB,EAAE,GAAG,MAAM,GAAG,KAAK;AAAA,MACnB,EAAE,GAAG,MAAM,GAAG,KAAK;AAAA,MACnB,EAAE,GAAG,MAAM,GAAG,KAAK;AAAA,IACvB;AAAA,EACJ;AAAA,EAEA,MAAc,iBAAgC;AAE1C,YAAQ,IAAI,uBAAuB;AAAA,EAEvC;AAAA,EAEA,MAAc,aAAa,UAAmC;AAC1D,YAAQ,IAAI,wBAAwB;AAAA,EAExC;AACJ;",
  "names": []
}
