{
  "version": 3,
  "sources": ["../../../src/core/client-detector.ts"],
  "sourcesContent": ["import { Position } from '../types';\n\ninterface GameWindow {\n    title: string;\n    position: Position;\n    dimensions: {\n        width: number;\n        height: number;\n    };\n}\n\ninterface ClientBounds {\n    x: number;\n    y: number;\n    width: number;\n    height: number;\n}\n\nexport class GameClientDetector {\n    private static readonly CLIENT_TITLE = \"2004Scape\";\n    private static readonly DEFAULT_CLIENT_SIZE = {\n        width: 765,\n        height: 503\n    };\n\n    private gameWindow: GameWindow | null = null;\n    private isClientFound: boolean = false;\n    private checkInterval: any = null;\n    private isBrowserEnvironment: boolean;\n    private manualClientBounds: ClientBounds | null = null;\n\n    constructor() {\n        this.isBrowserEnvironment = typeof window !== 'undefined';\n        if (this.isBrowserEnvironment) {\n            // Try to load saved client bounds\n            const savedBounds = localStorage.getItem('gameClientBounds');\n            if (savedBounds) {\n                this.manualClientBounds = JSON.parse(savedBounds);\n            }\n            this.startDetection();\n        }\n    }\n\n    public async setClientBounds(bounds: ClientBounds): Promise<void> {\n        this.manualClientBounds = bounds;\n        localStorage.setItem('gameClientBounds', JSON.stringify(bounds));\n        \n        // Update game window with manual bounds\n        this.gameWindow = {\n            title: document.title,\n            position: {\n                x: bounds.x,\n                y: bounds.y\n            },\n            dimensions: {\n                width: bounds.width,\n                height: bounds.height\n            }\n        };\n        \n        this.isClientFound = true;\n        this.emitClientFound();\n    }\n\n    public startDetection(): void {\n        if (!this.isBrowserEnvironment) {\n            console.log('Client detection is only available in browser environment');\n            return;\n        }\n\n        if (this.checkInterval) {\n            return;\n        }\n\n        console.log('Starting game client detection...');\n        this.checkInterval = setInterval(() => this.detectClient(), 1000);\n    }\n\n    public stopDetection(): void {\n        if (this.checkInterval) {\n            clearInterval(this.checkInterval);\n            this.checkInterval = null;\n        }\n    }\n\n    private detectClient(): void {\n        if (!this.isBrowserEnvironment) return;\n\n        try {\n            // If we have manual bounds, use those\n            if (this.manualClientBounds) {\n                this.isClientFound = true;\n                this.gameWindow = {\n                    title: document.title,\n                    position: {\n                        x: this.manualClientBounds.x,\n                        y: this.manualClientBounds.y\n                    },\n                    dimensions: {\n                        width: this.manualClientBounds.width,\n                        height: this.manualClientBounds.height\n                    }\n                };\n                this.stopDetection();\n                this.emitClientFound();\n                return;\n            }\n\n            // Otherwise try automatic detection\n            const gameCanvas = document.querySelector('canvas');\n            if (gameCanvas && this.isGameClient(gameCanvas)) {\n                this.isClientFound = true;\n                this.gameWindow = {\n                    title: document.title,\n                    position: {\n                        x: window.screenX,\n                        y: window.screenY\n                    },\n                    dimensions: {\n                        width: gameCanvas.width,\n                        height: gameCanvas.height\n                    }\n                };\n                this.stopDetection();\n                this.emitClientFound();\n            }\n        } catch (error) {\n            console.error('Error detecting game client:', error);\n        }\n    }\n\n    private isGameClient(canvas: HTMLCanvasElement): boolean {\n        if (!this.isBrowserEnvironment) return false;\n\n        // Check if canvas dimensions match the game client\n        const matchesDimensions = \n            canvas.width === GameClientDetector.DEFAULT_CLIENT_SIZE.width &&\n            canvas.height === GameClientDetector.DEFAULT_CLIENT_SIZE.height;\n\n        // Check if title contains 2004Scape\n        const matchesTitle = document.title.includes(GameClientDetector.CLIENT_TITLE);\n\n        // Check for game-specific elements\n        const hasGameElements = this.checkForGameElements();\n\n        return matchesDimensions && matchesTitle && hasGameElements;\n    }\n\n    private checkForGameElements(): boolean {\n        if (!this.isBrowserEnvironment) return false;\n\n        // Check for specific game UI elements\n        const hasGameInterface = document.querySelector('#game-interface') !== null;\n        const hasMinimapArea = document.querySelector('#minimap-area') !== null;\n        const hasChatbox = document.querySelector('#chatbox-area') !== null;\n\n        // Check for game-specific URLs or resources\n        const isGameDomain = window.location.hostname.includes('2004.lostcity.rs');\n\n        return hasGameInterface || hasMinimapArea || hasChatbox || isGameDomain;\n    }\n\n    private emitClientFound(): void {\n        if (!this.isBrowserEnvironment) return;\n\n        const event = new CustomEvent('gameClientFound', {\n            detail: this.gameWindow\n        });\n        window.dispatchEvent(event);\n    }\n\n    public isClientDetected(): boolean {\n        return this.isClientFound;\n    }\n\n    public getGameWindow(): GameWindow | null {\n        return this.gameWindow;\n    }\n\n    public async waitForClient(timeout: number = 30000): Promise<GameWindow> {\n        if (!this.isBrowserEnvironment) {\n            return Promise.reject(new Error('Client detection is only available in browser environment'));\n        }\n\n        // If we already have manual bounds, use those immediately\n        if (this.manualClientBounds && this.gameWindow) {\n            return Promise.resolve(this.gameWindow);\n        }\n\n        return new Promise((resolve, reject) => {\n            if (this.isClientFound && this.gameWindow) {\n                resolve(this.gameWindow);\n                return;\n            }\n\n            const timeoutId = setTimeout(() => {\n                this.stopDetection();\n                // Open client selector if automatic detection fails\n                window.open('/client-selector', '_blank', 'width=800,height=600');\n                reject(new Error('Game client detection timed out. Please use manual selection.'));\n            }, timeout);\n\n            window.addEventListener('gameClientFound', ((event: CustomEvent) => {\n                clearTimeout(timeoutId);\n                resolve(event.detail);\n            }) as EventListener);\n\n            this.startDetection();\n        });\n    }\n}\n"],
  "mappings": "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",
  "names": []
}
